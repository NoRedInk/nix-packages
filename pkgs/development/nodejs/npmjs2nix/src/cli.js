#!/usr/bin/env node

import yargs from 'yargs'
import shell from 'shelljs'
import fs from 'fs'
import npmjs2nix from './npmjs2nix'

const argv = yargs
  .usage('Generate Nix expressions from package.json and package-lock.json\n\nUsage: $0 [options]')
  .alias('version', 'v')
  .help('help').alias('help', 'h')
  .option('p', {
    alias: 'package',
    default: './package.json',
    describe: 'Path to the package.json file',
    type: 'string',
  })
  .option('l', {
    alias: 'package-lock',
    default: './package-lock.json',
    describe: 'Path to the package-lock.json file',
    type: 'string',
  })
  .option('o', {
    alias: 'output',
    default: './npm-package.nix',
    describe: 'Output .nix file',
    type: 'string',
  })
  .option('no-npm-install', {
    default: false,
    describe: 'Do not run `npm install --package-lock-only` before generating nix expressions',
    type: 'boolean',
  })
  .strict()
  .argv

const generate = (code = 0) => {
  try {
    if (code !== 0) {
      throw new Error('The command `npm install --package-lock-only` returns an error')
    }

    const pkgJsonContent = fs.readFileSync(argv.p, 'utf8')
    const pkgLockJsonContent = fs.readFileSync(argv.l, 'utf8')
    const pkg = JSON.parse(pkgJsonContent)
    const pkgLock = JSON.parse(pkgLockJsonContent)

    npmjs2nix(pkg, pkgLock).then(function (nixstr) {
      nixstr = '# This file is generated by npm-package-to-nix. Do not edit.\n\n' + nixstr
      fs.writeFileSync(argv.o, nixstr)
      console.log('Nix expression saved to ' + argv.o)
    }).catch(function (e) {
      yargs.showHelp('error')
      console.error('\n', e)
      process.exit(-1)
    })
  } catch (e) {
    yargs.showHelp('error')
    console.error('\n', e)
    process.exit(-1)
  }
}

if (argv['no-npm-install']) {
  generate()
} else {
  shell.exec('npm install --package-lock-only', generate)
}
